{"version":3,"sources":["Table.tsx","components/EditableCell.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditableCell","editing","dataIndex","title","inputType","children","record","index","restProps","inputNode","Item","name","style","margin","rules","required","message","originData","i","push","key","toString","TableDemo","Form","useForm","form","useState","data","setData","editingKey","setEditingKey","isEditing","cancel","save","a","validateFields","row","newData","findIndex","item","splice","console","log","mergedColumns","width","editable","render","_","href","onClick","marginRight","onConfirm","Link","disabled","setFieldsValue","age","address","edit","map","col","onCell","component","components","body","cell","bordered","dataSource","columns","rowClassName","pagination","onChange","Content","Layout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d07d685.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Table, Popconfirm, Form, Typography } from 'antd';\r\nimport {EditableCell} from './components/EditableCell';\r\n\r\n\r\ninterface Item {\r\n    key: string;\r\n}\r\n\r\nconst originData: Item[] = [];\r\nfor (let i = 0; i < 20; i++) {\r\n    originData.push({\r\n        key: i.toString(),\r\n    });\r\n}\r\n\r\n\r\nconst TableDemo:React.FC = () => {\r\n    const [form] = Form.useForm();\r\n    const [data, setData] = useState(originData);\r\n    const [editingKey, setEditingKey] = useState('');\r\n\r\n    const isEditing = (record: Item) => record.key === editingKey;\r\n\r\n    const edit = (record: Partial<Item> & { key: React.Key }) => {\r\n        form.setFieldsValue({ name: '', age: '', address: '', ...record });\r\n        setEditingKey(record.key);\r\n    };\r\n\r\n    const cancel = () => {\r\n        setEditingKey('');\r\n    };\r\n\r\n    const save = async (key: React.Key) => {\r\n        try {\r\n            const row = (await form.validateFields()) as Item;\r\n\r\n            const newData = [...data];\r\n            const index = newData.findIndex(item => key === item.key);\r\n            if (index > -1) {\r\n                const item = newData[index];\r\n                newData.splice(index, 1, {\r\n                    ...item,\r\n                    ...row,\r\n                });\r\n                setData(newData);\r\n                setEditingKey('');\r\n            } else {\r\n                newData.push(row);\r\n                setData(newData);\r\n                setEditingKey('');\r\n            }\r\n        } catch (errInfo) {\r\n            console.log('Validate Failed:', errInfo);\r\n        }\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'name',\r\n            dataIndex: 'name',\r\n            width: '25%',\r\n            editable: true,\r\n        },\r\n        {\r\n            title: 'age',\r\n            dataIndex: 'age',\r\n            width: '15%',\r\n            editable: true,\r\n        },\r\n        {\r\n            title: 'address',\r\n            dataIndex: 'address',\r\n            width: '40%',\r\n            editable: true,\r\n        },\r\n        {\r\n            title: 'operation',\r\n            dataIndex: 'operation',\r\n            render: (_: any, record: Item) => {\r\n                const editable = isEditing(record);\r\n                return editable ? (\r\n                    <span>\r\n            <a href=\"javascript:\" onClick={() => save(record.key)} style={{ marginRight: 8 }}>\r\n              Save\r\n            </a>\r\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\r\n              <a>Cancel</a>\r\n            </Popconfirm>\r\n          </span>\r\n                ) : (\r\n                    <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)}>\r\n                        Edit\r\n                    </Typography.Link>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n\r\n    const mergedColumns = columns.map(col => {\r\n        if (!col.editable) {\r\n            return col;\r\n        }\r\n        return {\r\n            ...col,\r\n            onCell: (record: Item) => ({\r\n                record,\r\n                inputType: col.dataIndex === 'age' ? 'number' : 'text',\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                editing: isEditing(record),\r\n            }),\r\n        };\r\n    });\r\n\r\n    return (\r\n        <Form form={form} component={false}>\r\n            <Table\r\n                components={{\r\n                    body: {\r\n                        cell: EditableCell,\r\n                    },\r\n                }}\r\n                bordered\r\n                dataSource={data}\r\n                columns={mergedColumns}\r\n                rowClassName=\"editable-row\"\r\n                pagination={{\r\n                    onChange: cancel,\r\n                }}\r\n            />\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport {TableDemo}","import { Form } from 'antd';\r\nimport {Input, InputNumber} from 'antd';\r\nimport React from 'react';\r\n\r\ninterface Item {\r\n    key: string;\r\n}\r\n\r\n\r\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\r\n    editing: boolean;\r\n    dataIndex: string;\r\n    title: any;\r\n    inputType: 'number' | 'text';\r\n    record: Item;\r\n    index: number;\r\n    children: React.ReactNode;\r\n}\r\n\r\n\r\nconst EditableCell: React.FC<EditableCellProps> = ({\r\n                                                       editing,\r\n                                                       dataIndex,\r\n                                                       title,\r\n                                                       inputType,\r\n                                                       record,\r\n                                                       index,\r\n                                                       children,\r\n                                                       ...restProps\r\n                                                   }) => {\r\n    const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n\r\n    return (\r\n        <td {...restProps}>\r\n            {editing ? (\r\n                <Form.Item\r\n                    name={dataIndex}\r\n                    style={{ margin: 0 }}\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: `Please Input ${title}!`,\r\n                        },\r\n                    ]}\r\n                >\r\n                    {inputNode}\r\n                </Form.Item>\r\n            ) : (\r\n                children\r\n            )}\r\n        </td>\r\n    );\r\n};\r\n\r\nexport {EditableCell}","import React from \"react\";\nimport \"./App.css\";\nimport { TableDemo } from \"./Table\";\nimport { Layout } from \"antd\";\nimport Title from \"antd/lib/typography/Title\";\n\n\n\nconst { Content } = Layout;\n\nconst App: React.FC = () => {\n  return (\n      <Layout>\n        <Content>\n          <Title >React + Ant Design 制作表格</Title>\n          <TableDemo />\n        </Content>\n      </Layout>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}